#!/bin/bash

##########################	  MASTER TO-ADD		############################
############################################################################
# add variables for fine tuning; like timeout for ssh and scp
# create feature to keep code updated between the nodes; check when to download from node when majority provides same src hash?
# make scripts check if anyone on subnet has different serverconfig or servername setup and respond accordingly
# in --add flag, test if the newly added node details are valid before commiting changes
# create a local record of my ip address once subnet is populated to remove need for external service
#
########################    	Extra details		########################
############################################################################
# functions:
#	-h --help			list help commands
#	-l --list			list saved servers from .nodes and check if they are online
#	-u --update			update known servers, send my ip address to known hosts
#	-cp --copy [src] [dst]		copy a file from/to a known host
#	-c --connect [node]		connect to a known host
#	-a --add			start the node addition helper, add node to "subnet"
#	-i --introduce [node] [node]	introduce two nodes to one another
#	--forget [node]			forget given node, remove keys and records
#	#	#	#	#	#	#	#	#	#	#	#	#	#
# Repeat(default=false):
# the repeat function is used to introduce all locally known hosts(except noted in .ignore) to the current remote node being updated
# if this is your first run you may create the file .nodes.ignore file and populate it with nodes to ignore
# the "node names" is used to determine which nodes should be ignored, the file should be a list of hostnames, each on a new line
#	#	#	#	#	#	#	#	#	#	#	#	#	#
# Script will install itself into users ~/home/bin folder, (the .bashrc file and the ~/home/bin folder will be checked, then install itself accordingly)
############################	REQUIREMENTS	############################
############################################################################
#
# Software assumes all nodes are uniquely identified by their "node names" within a "subnet"
# Account running the script is assumed to be the desired node PUBLIC account!
#
############################################################################
############################################################################


#remote nodes file location, exec filename
#note: make sure these are the SAME across ALL NODES within a "subnet"
serverconfig=".nodes"
SCRIPTNAME=nodeUP

#check for .nodes.myconfig file, use this file to save node details (name, port, repeat=false)
if [ ! -f "$HOME/$serverconfig.myconfig" ] ; then
	echo "First use detected... please input next setup parameters carefully:-"
	while ! [[ "$correct" =~ ^yes$ ]]; do
		while ! [[ "$servname" =~ ^[a-zA-Z0-9]+$ ]] ; do read -p "Enter a name for this node(a-Z1-9):" servname; done
		while ! [[ "$myport" =~ ^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$ ]] ; do read -p "Enter the SSH port used(EXTERNAL):" myport; done
		read -p "Would you like to use this node as a RPEATER?(y/N):" repeat; echo ""
		if [[ "$repeat" =~ ^[yY]$ ]] ; then repeat=true; else repeat=false; fi
		read -p "Was the provided information above correct?(type yes to continue):" correct
	done
	echo "servname=$servname" >> "$HOME/$serverconfig.myconfig"
	echo "myport=$myport" >> "$HOME/$serverconfig.myconfig"
	echo "repeat=$repeat" >> "$HOME/$serverconfig.myconfig"

	chmod 600 "$HOME/$serverconfig.myconfig"
	echo "Saved into $HOME/$serverconfig.myconfig"
#import config if found
else source "$HOME/$serverconfig.myconfig"; fi


####	Install Script	####
# check if .bashrc has $HOME/bin entry..
if ! grep -q '$HOME/bin' "$HOME/.bashrc" ; then
	echo 'if [ -d "$HOME/bin" ] ; then PATH="$HOME/bin:$PATH" ; fi' >> "$HOME/.bashrc"
fi
# check if script needs to be installed into the ~/bin folder (copy if script found running from outside the bin folder)
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
if [[ ! "$DIR" =~ $HOME/bin ]] ; then
	if [ ! -f "$HOME/bin" ] ; then mkdir "$HOME/bin" ; fi
	ME=`basename "$0"`
	cp "$DIR/$ME" "$HOME/bin/$SCRIPTNAME"
	echo "please logout and back in for effects to take place! Next re-run the script to continue"
	echo "you may use the command $SCRIPTNAME -h for the help page"
	exit 0
fi


####	.nodes cleanup	####
#check for .nodes file & remove old entries (lower is newer!)
# instead check based on ip, port and user to allow more nodes?
if [ ! -f "$HOME/$serverconfig" ]; then  #create new file 
	echo "file $serverconfig not found... creating new at home dir."
	touch "$HOME/$serverconfig" && chmod 600 "$HOME/$serverconfig"
else #cleanup file
	record=$(cat "$HOME/$serverconfig" | awk -F: -vOFS=':' '{array[$1]=$0} END{for(a in array) print array[a]}')
	if ! [ -z "$record" ]; then echo "$record" > "$HOME/$serverconfig"; fi
	echo "Removing duplicate records...done"
fi


############################	FLAG TESTING	############################
############################################################################
if [ "$1" == "-l" ] || [ "$1" == "--list" ]; then
	echo "Servers List"
	printf "%-10s\t%-10s\t%-10s\t%-10s\t%-10s\t%-10s\n" "Node name" "IP Address" "Username" "SSH port" "Date Updated" "STATUS"
	while IFS= read -r -u3 line; do
		IFS=':' read -r -a node <<< "$line"
		#check if server is online
		if ssh "${node[2]}@${node[1]}" -p "${node[3]}" -i "$HOME/.ssh/${node[0]}" "echo ping" >&/dev/null ; then cStat="Online" ; else cStat="Offline" ; fi #check if the given host is online
		printf "%-10s\t%-10s\t%-10s\t%-10s\t%-10s\t%-10s\n" "${node[0]}" "${node[1]}" "${node[2]}" "${node[3]}" "${node[4]}" "$cStat"
	done 3< "$HOME/$serverconfig"
	exit 0

elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	echo "$0 help page:"
	printf "%25s\t-\t%s\n" "-h --help" "list help commands(this page)"
	printf "%25s\t-\t%s\n" "-l --list" "list saved servers from $HOME/$serverconfig and check if they are online"
	printf "%25s\t-\t%s\n" "-u --update" "update known servers, send my ip address to known hosts"
	printf "%25s\t-\t%s\n" "-cp --copy [src] [dst]" "copy a file from/to a known host (SCP)"
	printf "%25s\t-\t%s\n" "-c --connect [node]" "connect to a known host (SSH)"
	printf "%25s\t-\t%s\n" "-a --add" "start the node addition helper, add node to \"subnet\""
	printf "%25s\t-\t%s\n" "-i --introduce [node] [node]" "introduce two nodes to one another"
	printf "%25s\t-\t%s\n" "-f --forget [node]" "forget given node, remove keys and records from both local and remote nodes"
	printf "%25s\t-\t%s\n" "--force [node]" "forget given node, remove keys and records ONLY the local node"
	exit 0

####	TODO: change mylastip to use non server source..
#			  possibly add a check feature before commiting changes(make sure the connections are valid at both ends).. 
elif [ "$1" == "-a" ] || [ "$1" == "--add" ] ; then
	mylastip="$(curl -s ifconfig.me)"

	if [ "$#" -eq 4 ] ; then
		echo "Welcome to the $SCRIPTNAME node addition helper(remote)"
		####	CHECK FOR INPUT VALIDITY
		if ! [[ "$2" =~ ^[a-zA-Z0-9]+$ ]] ; then echo "error: incorrect Node Name format"; exit 1; fi
		if ! [[ "$3" =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$ ]] ; then echo "error: incorrect Ip Address format"; exit 1; fi
		if ! [[ "$4" =~ ^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$ ]] ; then echo "error: incorrect Port Number format"; exit 1; fi

		####	Give my key
		ssh-keygen -t rsa -N "" -f "$HOME/.ssh/$2"
		echo ""
		echo "COPY THIS KEY INTO THE FIRST NODE!!!"
		mykey=$(awk '{printf $1; printf " "; printf $2; printf " "}' <<< $(cat "$HOME/.ssh/$2.pub") && printf '%s@%s\n' "$USER" "$servname") && rm "$HOME/.ssh/$2.pub"
		echo ""; echo "$mykey"; echo ""


		echo "My details to relay back:"
		echo "	IP & Port: $mylastip $myport"
		echo ""

		####	input key
		rkey=""
		while ! [[ "$rkey" =~ ^[^\ ]+\ [^\ ]+\ [^\ ]+@[^\ ]+$ ]] ; do
			read -p "Enter the SSH Auth Key provied:" rkey
		done
		ruser=$(cut -f1 -d '@' <<< $rkey <<< $(cut -f3 -d ' ' <<< $rkey))

		echo "$rkey" >> "$HOME/.ssh/authorized_keys"; rkey=""
		echo "$2:$3:$ruser:$4:$(date +%x:%H:%M:%S)" >> "$HOME/$serverconfig"
		echo "Entry has been recorded"
		echo "My updated IP will be sent next script run with -u flag."
		exit 0
	elif [ "$#" -eq 1 ] ; then # local node addition helper code
		echo "Welcome to the $SCRIPTNAME node addition helper, this is kinda early stage"
		echo "To add a node to the subnet please make sure you have $SCRIPTNAME installed and ready to use..."
		echo "Please run the following command on the second machine:"
		echo "	$SCRIPTNAME -a $servname $mylastip $myport"

		####	input key
		rkey=""
		while ! [[ "$rkey" =~ ^[^\ ]+\ [^\ ]+\ [^\ ]+@[^\ ]+$ ]] ; do
			read -p "Enter the provied SSH Auth Key:" rkey
		done
		ruser=$(cut -f1 -d '@' <<< $rkey <<< $(cut -f3 -d ' ' <<< $rkey))
		rname=$(cut -f2 -d '@' <<< $rkey <<< $(cut -f3 -d ' ' <<< $rkey))

		####	input ip and port
		read -p "Enter the IP & Port (space seperated):" rip rport
		if ! [[ "$rip" =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$ ]] ; then echo "error: incorrect Ip Address format"; exit 1; fi
		if ! [[ "$rport" =~ ^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$ ]] ; then echo "error: incorrect Port Number format"; exit 1; fi


		ssh-keygen -t rsa -N "" -f "$HOME/.ssh/$rname"
		echo "COPY THIS KEY INTO THE REMOTE NODE NOW!!!"
		mykey=$(awk '{printf $1; printf " "; printf $2; printf " "}' <<< $(cat "$HOME/.ssh/$rname.pub") && printf '%s@%s\n' "$USER" "$servname") && rm "$HOME/.ssh/$rname.pub"
		echo ""; echo "$mykey"; echo ""

		echo "$rkey" >> "$HOME/.ssh/authorized_keys"; rkey=""
		echo "$rname:$rip:$ruser:$rport:$(date +%x:%H:%M:%S)" >> "$HOME/$serverconfig"
		echo "Entry has been recorded"
		echo "My updated IP will be sent next script run with -u flag."
		exit 0
	else 
		echo "incorrect number of parameters passed, error running the flag $1; please check $0 -h"
		exit 1
	fi


#		fix issue with dangling entry in .ssh/authorized_keys after forgeting a node --- CHECK
elif [ "$1" == "-f" ] || [ "$1" == "--forget" ] || [ "$1" == "--force" ] ; then
	if [ "$#" -eq 2 ] ; then
		if [ "$1" == "--force" ] ; then # force forget a node.. remove local access keys and entries only, called on "remote" node when using -f
			if grep -q "$2" "$HOME/$serverconfig" ; then
				IFS=':' read -r -a node <<< $(grep "$2" "$HOME/$serverconfig")
				sed -i "/^$2.*\$/d" "$HOME/$serverconfig"
				rm "$HOME/.ssh/$2"
				sed -i "/${node[2]}@${node[0]}/d" "$HOME/.ssh/authorized_keys"
				echo "Removal of local entries...done"
				exit 0
			else
				echo "error: Host $2 not found"
				exit 1
			fi
		else
			if [ -f "$HOME/.ssh/$2" ] && grep -q "$2" "$HOME/$serverconfig" ; then
				read -p "Are you sure? (to continue type HostName: $2) " reply
				if ! [[ "$reply" =~ ^$2$ ]] ; then echo "Reply did not match, quitting..."; exit 1; else
					IFS=':' read -r -a node <<< $(grep "$2" "$HOME/$serverconfig")
					printf '%s' "Removal of remote entries at node $2..."
					if ssh "${node[2]}@${node[1]}" -p "${node[3]}" -i "$HOME/.ssh/${node[0]}" "$SCRIPTNAME --force $servname" >&/dev/null ; then
						echo "done"
						sed -i "/^$2.*\$/d" "$HOME/$serverconfig"
						rm "$HOME/.ssh/$2"
						sed -i "/${node[2]}@${node[0]}/d" "$HOME/.ssh/authorized_keys"
						echo "Removal of local entries...done"
						exit 0
					else
						echo "fail"; echo "error: Failed to remove records from remote node $2. quitting..."
						exit 1
					fi
				fi
			else
				echo "error: Host $2 not found"
				exit 1
			fi
		fi
	else
		echo "incorrect number of parameters passed, error running the flag $1; please check $0 -h"
		exit 1
	fi
	
elif [ "$1" == "-cp" ] || [ "$1" == "--copy" ]; then
	if [ "$#" -eq 3 ]; then 
		if [[ "$2" =~ ^[a-zA-Z0-9]+:[^\0:]+$ ]] && [[ "$3" =~ ^[^\0:]+$ ]] ; then # syntax: from-remote to-local
			rnode=$(cut -f1 -d: <<< "$2")
			rpath=$(cut -f2 -d: <<< "$2")
			if [ -f "$HOME/.ssh/$rnode" ] && grep -q "$rnode" "$HOME/$serverconfig" ; then
				IFS=':' read -r -a node <<< $(grep "$rnode" "$HOME/$serverconfig")
				printf "Retrieving file(s)..."
				if ! scp -P "${node[3]}" -i "$HOME/.ssh/${node[0]}" "${node[2]}@${node[1]}:$rpath" "$3" >&/dev/null ; then echo "error! scp failed to download" ; exit 1 ; fi
				echo "done"
				exit 0
			else
				echo "node $rnode not found..."
				exit 1
			fi
		elif [[ "$2" =~ ^[^\0:]+$ ]] && [[ "$3" =~ ^[a-zA-Z0-9]+:[^\0:]+$ ]] ; then # syntax: from-local to-remote
			rnode=$(cut -f1 -d: <<< "$3")
			rpath=$(cut -f2 -d: <<< "$3")
			if [ -f "$HOME/.ssh/$rnode" ] && grep -q "$rnode" "$HOME/$serverconfig" ; then
				IFS=':' read -r -a node <<< $(grep "$rnode" "$HOME/$serverconfig")
				printf "Sending file(s)..."
				if ! scp -P "${node[3]}" -i "$HOME/.ssh/${node[0]}" "$2" "${node[2]}@${node[1]}:$rpath" >&/dev/null ; then echo "error! scp failed to upload" ; exit 1 ; fi
				echo "done"
				exit 0
			else
				echo "node $rnode not found..."
				exit 1
			fi
		else 
			echo "The passed Source/Destination variable(s) are not formatted correctly. please check $0 -h"
			exit 1
		fi
	else
		echo "incorrect number of parameters passed, error running the flag $1; please check $0 -h"
		exit 1
	fi

elif [ "$1" == "-c" ] || [ "$1" == "--connect" ] ; then
	if [ "$#" -eq 2 ] ; then 
		if [ -f "$HOME/.ssh/$2" ] && grep -q "$2" "$HOME/$serverconfig" ; then
			IFS=':' read -r -a node <<< $(grep "$2" "$HOME/$serverconfig")
			#MODIFY FOR SPECIAL SSH CONSOLE
			ssh "${node[2]}@${node[1]}" -p "${node[3]}" -i "$HOME/.ssh/${node[0]}"

			exit 0
		else
			echo "Node $2 not found"
			exit 1
		fi
	else
		echo "incorrect number of parameters passed, error running the flag $1; please check $0 -h"
		exit 1
	fi

elif [ "$1" == "-i" ] || [ "$1" == "--introduce" ]; then
	if [ "$#" -eq 3 ]; then
		if [ -f "$HOME/.ssh/$2" ] && grep -q "$2" "$HOME/$serverconfig" ; then
			if [ -f "$HOME/.ssh/$3" ] && grep -q "$3" "$HOME/$serverconfig" ; then
				n1=$(grep "$2" "$HOME/$serverconfig")
				n2=$(grep "$3" "$HOME/$serverconfig")
				IFS=':' read -r -a node1 <<< "$n1"
				IFS=':' read -r -a node2 <<< "$n2"
				#make sure both servers are online
				if ssh "${node1[2]}@${node1[1]}" -p "${node1[3]}" -i "$HOME/.ssh/${node1[0]}" "echo ping" >&/dev/null ; then
					if ssh "${node2[2]}@${node2[1]}" -p "${node2[3]}" -i "$HOME/.ssh/${node2[0]}" "echo ping" >&/dev/null ; then
						printf "Introducing Node $2 to $3..."
						n2keytmp=$(ssh ${node1[2]}@${node1[1]} -p ${node1[3]} -i $HOME/.ssh/${node1[0]} "ssh-keygen -t rsa -N '' -f \$HOME/.ssh/${node2[0]} >&/dev/null && cat \$HOME/.ssh/${node2[0]}.pub && rm \$HOME/.ssh/${node2[0]}.pub && echo '$n2' >> $serverconfig")
						n2key=$(awk '{printf $1; printf " "; printf $2; printf " "}' <<< $n2keytmp && printf '%s@%s\n' "${node1[2]}" "${node1[0]}")
						n1keytmp=$(ssh ${node2[2]}@${node2[1]} -p ${node2[3]} -i $HOME/.ssh/${node2[0]} "echo '$n2key' >> \$HOME/.ssh/authorized_keys; ssh-keygen -t rsa -N '' -f \$HOME/.ssh/${node1[0]} >&/dev/null && cat \$HOME/.ssh/${node1[0]}.pub && rm \$HOME/.ssh/${node1[0]}.pub && echo '$n1' >> $serverconfig")
						n1key=$(awk '{printf $1; printf " "; printf $2; printf " "}' <<< $n1keytmp && printf '%s@%s\n' "${node2[2]}" "${node2[0]}")
						ssh "${node1[2]}@${node1[1]}" -p "${node1[3]}" -i "$HOME/.ssh/${node1[0]}" "echo '$n1key' >> \$HOME/.ssh/authorized_keys"
						echo "done"
						exit 0
					else
						echo "Node ${node2[0]} seems to be offline"
						exit 1
					fi
				else
					echo "Node ${node1[0]} seems to be offline"
					exit 1
				fi
			else
				echo "Node $3 not found"
				exit 1
			fi
		else
			echo "Node $2 not found"
			exit 1
		fi
	else
		echo "Incorrect number of parameters passed, error running the flag $1; please check $0 -h"
		exit 1
	fi

elif [ "$1" == "-u" ] || [ "$1" == "--update" ] || [ $# = 0 ]; then
	while IFS= read -r -u3 line; do
		IFS=':' read -r -a node <<< "$line"
		if [ "$repeat" = true ] ; then
			printf "repeating known hosts to ${node[0]}..."
			clienthostsfile="$HOME/.ssh/.${node[0]}" #save the retrived .nodes file from "remote" as .ssh/"node-name"
			if ! scp -P "${node[3]}" -i "$HOME/.ssh/${node[0]}" "${node[2]}@${node[1]}:~/$serverconfig $clienthostsfile" >&/dev/null ; then echo "failed! client does not have $serverconfig file correctly setup" ; else
				for host in $HOME/.ssh/* ; do #for each known host in .ssh check if client has host details
					if ! [ "$host" == "${node[0]}" ] && grep -q "$host" "$HOME/$serverconfig" && ! grep -q "$host" "$clienthostsfile" ; then #if the given key is not from client and the file is detailed in .nodes file and is not in the clients .nodes file
						if [ -f "$HOME/$serverconfig.ignore" ] && grep -q "$host" "$HOME/$serverconfig.ignore"; then echo "ignoring host $host due to the ignore file" ; else
							bash "$SCRIPTNAME" -i "$host" "${node[0]}" >&/dev/null
						fi
					fi
				done
				rm "$clienthostsfile"
				echo "done"
			fi
		fi
		printf "sending my ip address to: ${node[2]}@${node[1]} on port ${node[3]}..."
		if ! ssh "${node[2]}@${node[1]}" -p "${node[3]}" -i "$HOME/.ssh/${node[0]}" "(printf '$servname:'; echo \$SSH_CLIENT | awk '{ printf \$1}'; printf ':$USER:$myport:$(date +%x:%H:%M:%S)\n') >> $serverconfig" >&/dev/null ; then #send new copy of my ip address to the client
			echo "Failed..Skipping"
		else
			echo "done"
		fi
	done 3< "$HOME/$serverconfig"
	exit 0

else 
	echo "unknown flag $1 please use -h or --help flag for more information on how to use this script"
	exit 1
fi
